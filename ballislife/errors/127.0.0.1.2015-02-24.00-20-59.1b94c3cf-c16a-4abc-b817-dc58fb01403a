(dp1
S'output'
p2
S"<type 'exceptions.ValueError'> Shape of passed values is (0, 0), indices imply (25, 0)"
p3
sS'layer'
p4
S'/Users/AlyanShafique/Documents/web2py/web2py/applications/ballislife/controllers/default.py'
p5
sS'code'
p6
S'# -*- coding: utf-8 -*-\n# this file is released under public domain and you can use without limitations\n\n#########################################################################\n## This is a sample controller\n## - index is the default action of any application\n## - user is required for authentication and authorization\n## - download is for downloading files uploaded in the db (does streaming)\n## - api is an example of Hypermedia API support and access control\n#########################################################################\nimport requests\nimport json as simplejson\nimport pandas as pd\nfrom players import teams\nimport time\n"""\n\nRefer: https://docs.python.org/2/library/json.html\n\nfilename = open(\'../Models/team_players.json\', \'r\')\n\nread_file = filename.read()\n\ny=json.loads(read_file)\n"""\npd.set_option(\'display.width\', 200)\npd.set_option(\'display.max_colwidth\', -1)\nplayers = []\nplayer_stats = {\'name\':None,\'gp\':None,\'w\':None,\'l\':None,\'win_pct\':None,\'min\':None,\'fgm\':None,\'fga\':None,\'fg_pct\':None,\n                \'fg3m\':None,\'fg3a\':None,\'fg3_pct\':None,\'ftm\':None,\'fta\':None,\'ft_pct\':None,\'oreb\':None,\'dreb\':None,\'reb\':None,\'ast\':None,\n                \'tov\':None,\'stl\':None,\'blk\':None,\'pf\':None,\'pts\':None,\'plus_minus\':None}\n#player_stats = {\'name\':None,\'avg_dribbles\':None,\'avg_touch_time\':None,\'avg_shot_distance\':None,\'avg_defender_distance\':None}\n\ndef index():\n    """\n    example action using the internationalization operator T and flash\n    rendered by views/default/index.html or views/generic.html\n\n    if you need a simple wiki simply replace the two lines below with:\n    return auth.wiki()\n    """\n    test = \'My Thumbnail\'\n    response.flash = T("Welcome to web2py!")\n    return dict(message=T(\'Hello World\'))\n\n\ndef scores():\n    test = \'My Thumbnail\'\n    response.flash = T("Welcome to web2py!")\n    return dict(message=T(\'Hello World\'))\n\ndef team_players():\n    return(dict(a="a"))\n\ndef find_stats(name,player_id):\n    """url = \'http://stats.nba.com/stats/playerdashptshotlog?\'+ \\\n    \'DateFrom=&DateTo=&GameSegment=&LastNGames=0&LeagueID=00&\' + \\\n    \'Location=&Month=0&OpponentTeamID=0&Outcome=&Period=0&\' + \\\n    \'PlayerID=\'+player_id+\'&Season=2014-15&SeasonSegment=&\' + \\\n    \'SeasonType=Regular+Season&TeamID=0&VsConference=&VsDivision=\'"""\n\n    url = \'http://stats.nba.com/stats/playerdashboardbygeneralsplits?\' + \\\n    \'DateFrom=&DateTo=&GameSegment=&LastNGames=0&LeagueID=00&Location=&\' + \\\n    \'MeasureType=Base&Month=0&OpponentTeamID=0&Outcome=&PaceAdjust=N&\' + \\\n    \'PerMode=PerGame&Period=0&PlayerID=\'+player_id+\'+&PlusMinus=N&Rank=N\' + \\\n    \'&Season=2014-15&SeasonSegment=&SeasonType=Regular+Season&VsConference=&VsDivision=\'\n    \n    #Create Dict based on JSON response\n    response = requests.get(url)\n    print response.elapsed\n    shots = response.json()[\'resultSets\'][0][\'rowSet\']\n    data = simplejson.loads(response.text)\n    #print (\'================================\')\n    #print data\n    #Create df from data and find averages\n    headers = data[\'resultSets\'][0][\'headers\']\n    shot_data = data[\'resultSets\'][0][\'rowSet\']\n    df = pd.DataFrame(shot_data,columns=headers)\n    #print (\'+++++++++++++++++++++++++++++++++\')\n    #print df\n    """avg_def = df[\'CLOSE_DEF_DIST\'].mean(axis=1)\n    avg_dribbles = df[\'DRIBBLES\'].mean(axis=1)\n    avg_shot_distance = df[\'SHOT_DIST\'].mean(axis=1)\n    avg_touch_time = df[\'TOUCH_TIME\'].mean(axis=1)"""\n    gp = df[\'GP\'].mean(axis=1)\n    w = df[\'W\'].mean(axis=1)\n    l = df[\'L\'].mean(axis=1)\n    win_pct = df[\'W_PCT\'].mean(axis=1)\n    min = df[\'MIN\'].mean(axis=1)\n    fgm = df[\'FGM\'].mean(axis=1)\n    fga = df[\'FGA\'].mean(axis=1)\n    fg_pct = df[\'FG_PCT\'].mean(axis=1)\n    fg3m = df[\'FG3M\'].mean(axis=1)\n    fg3a = df[\'FG3A\'].mean(axis=1)\n    fg3_pct = df[\'FG3_PCT\'].mean(axis=1)\n    ftm = df[\'FTM\'].mean(axis=1)\n    fta = df[\'FTA\'].mean(axis=1)\n    ft_pct = df[\'FT_PCT\'].mean(axis=1)\n    oreb = df[\'OREB\'].mean(axis=1)\n    dreb = df[\'DREB\'].mean(axis=1)\n    reb = df[\'REB\'].mean(axis=1)\n    ast = df[\'AST\'].mean(axis=1)\n    tov = df[\'TOV\'].mean(axis=1)\n    stl = df[\'STL\'].mean(axis=1)\n    blk = df[\'BLK\'].mean(axis=1)\n    pf = df[\'PF\'].mean(axis=1)\n    pts = df[\'PTS\'].mean(axis=1)\n    plus_minus = df[\'PLUS_MINUS\'].mean(axis=1)\n    #add averages to dictionary\n    player_stats[\'name\'] = name\n    """player_stats[\'avg_defender_distance\']=avg_def\n    player_stats[\'avg_shot_distance\'] = avg_shot_distance\n    player_stats[\'avg_touch_time\'] = avg_touch_time\n    player_stats[\'avg_dribbles\'] = avg_dribbles\n    players.append(player_stats.copy())"""\n    player_stats[\'gp\'] = gp\n    player_stats[\'w\']= w\n    player_stats[\'l\'] = l\n    player_stats[\'win_pct\'] = win_pct\n    player_stats[\'min\'] = min\n    player_stats[\'fgm\'] = fgm\n    player_stats[\'fga\'] = fga\n    player_stats[\'fg_pct\'] = fg_pct\n    player_stats[\'fg3m\'] = fg3m\n    player_stats[\'fg3a\'] = fg3a\n    player_stats[\'fg3_pct\'] = fg3_pct\n    player_stats[\'ftm\'] = ftm\n    player_stats[\'fta\'] = fta\n    player_stats[\'ft_pct\'] = ft_pct\n    player_stats[\'ftm\'] = ftm\n    player_stats[\'fta\'] = fta\n    player_stats[\'ft_pct\'] = ft_pct\n    player_stats[\'oreb\'] = oreb\n    player_stats[\'dreb\'] = dreb\n    player_stats[\'reb\'] = reb\n    player_stats[\'ast\'] = ast\n    player_stats[\'tov\'] = tov\n    player_stats[\'stl\'] = stl\n    player_stats[\'blk\'] = blk\n    player_stats[\'pf\'] = pf\n    player_stats[\'pts\'] = pts\n    player_stats[\'+/-\'] = plus_minus\n    players.append(player_stats.copy())\n\ndef stats():\n    with open (\'applications/ballislife/static/team_players.json\') as f:\n        data=f.read()\n        z=simplejson.dumps(data)\n    q = db.player\n    #NBA Stats API using selected player ID\n    """Will continue inserting into db.player\n    for x in teams:\n        for y,z in teams[x].items():\n            db.player.insert(**{\'name\':y, \'player_id\':z})"""\n    #print db.executesql(\'DELETE (*) FROM player;\')\n    #print db.executesql(\'SELECT * FROM player;\')\n        #for y in teams[x]:\n            #db.player.insert(**{})\n            #print teams[x][y]\n    form = SQLFORM.grid(q,\n        fields=[db.player.name, db.player.player_id],)\n    #find_stats(\'Stephen Curry\',\'201939\')\n    #find_stats(\'James Harden\',\'201935\')\n    #find_stats(\'Klay Thompson\',\'202691\')\n    #find_stats(\'LeBron James\',\'2544\')\n    #cols = [\'name\',\'avg_defender_distance\',\'avg_dribbles\',\'avg_shot_distance\',\'avg_touch_time\']\n    cols = [\'name\', \'gp\', \'w\', \'l\', \'win_pct\', \'min\', \'fgm\', \'fga\', \'fg_pct\', \'fg3m\', \'fg3a\', \'fg3_pct\',\n            \'ftm\', \'fta\',\'ft_pct\', \'pf\', \'oreb\', \'dreb\', \'reb\', \'ast\', \'tov\', \'stl\', \'blk\', \'pts\', \'+/-\']\n    df = pd.DataFrame(players,columns = cols)\n    print (\'=========================\')\n    print df\n    df = df.to_html(classes="table table-condensed")\n    return dict(form=form)\n\n#def view_player(name, player_id):\n    \n    \n\ndef top_players():\n    test = \'My Thumbnail\'\n    response.flash = T("Welcome to web2py!")\n    return dict(message=T(\'Hello World\'))\n\ndef user():\n    """\n    exposes:\n    http://..../[app]/default/user/login\n    http://..../[app]/default/user/logout\n    http://..../[app]/default/user/register\n    http://..../[app]/default/user/profile\n    http://..../[app]/default/user/retrieve_password\n    http://..../[app]/default/user/change_password\n    http://..../[app]/default/user/manage_users (requires membership in\n    use @auth.requires_login()\n        @auth.requires_membership(\'group name\')\n        @auth.requires_permission(\'read\',\'table name\',record_id)\n    to decorate functions that need access control\n    """\n    return dict(form=auth())\n\n\n@cache.action()\ndef download():\n    """\n    allows downloading of uploaded files\n    http://..../[app]/default/download/[filename]\n    """\n    return response.download(request, db)\n\n\ndef call():\n    """\n    exposes services. for example:\n    http://..../[app]/default/call/jsonrpc\n    decorate with @services.jsonrpc the functions to expose\n    supports xml, json, xmlrpc, jsonrpc, amfrpc, rss, csv\n    """\n    return service()\n\n\n@auth.requires_login() \ndef api():\n    """\n    this is example of API with access control\n    WEB2PY provides Hypermedia API (Collection+JSON) Experimental\n    """\n    from gluon.contrib.hypermedia import Collection\n    rules = {\n        \'<tablename>\': {\'GET\':{},\'POST\':{},\'PUT\':{},\'DELETE\':{}},\n        }\n    return Collection(db).process(request,response,rules)\n\nresponse._vars=response._caller(stats)\n'
p7
sS'snapshot'
p8
(dp9
sS'traceback'
p10
S'Traceback (most recent call last):\n  File "/Users/AlyanShafique/Documents/web2py/web2py/gluon/restricted.py", line 226, in restricted\n    exec ccode in environment\n  File "/Users/AlyanShafique/Documents/web2py/web2py/applications/ballislife/controllers/default.py", line 233, in <module>\n  File "/Users/AlyanShafique/Documents/web2py/web2py/gluon/globals.py", line 393, in <lambda>\n    self._caller = lambda f: f()\n  File "/Users/AlyanShafique/Documents/web2py/web2py/applications/ballislife/controllers/default.py", line 169, in stats\n    df = pd.DataFrame(players,columns = cols)\n  File "/Applications/anaconda/lib/python2.7/site-packages/pandas/core/frame.py", line 255, in __init__\n    copy=copy)\n  File "/Applications/anaconda/lib/python2.7/site-packages/pandas/core/frame.py", line 367, in _init_ndarray\n    return create_block_manager_from_blocks([values.T], [columns, index])\n  File "/Applications/anaconda/lib/python2.7/site-packages/pandas/core/internals.py", line 3230, in create_block_manager_from_blocks\n    construction_error(tot_items, blocks[0].shape[1:], axes, e)\n  File "/Applications/anaconda/lib/python2.7/site-packages/pandas/core/internals.py", line 3211, in construction_error\n    passed,implied))\nValueError: Shape of passed values is (0, 0), indices imply (25, 0)\n'
p11
s.