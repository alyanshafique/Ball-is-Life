(dp1
S'output'
p2
S"<type 'exceptions.ValueError'> Shape of passed values is (1, 33), indices imply (33, 33)"
p3
sS'layer'
p4
S'/Users/AlyanShafique/Documents/web2py/web2py/applications/ballislife/controllers/default.py'
p5
sS'code'
p6
S'# -*- coding: utf-8 -*-\n# this file is released under public domain and you can use without limitations\n\n#########################################################################\n## This is a sample controller\n## - index is the default action of any application\n## - user is required for authentication and authorization\n## - download is for downloading files uploaded in the db (does streaming)\n## - api is an example of Hypermedia API support and access control\n#########################################################################\nimport requests\nimport json as simplejson\nimport pandas as pd\nfrom players import teams\nimport time\n"""\n\nRefer: https://docs.python.org/2/library/json.html\n\nfilename = open(\'../Models/team_players.json\', \'r\')\n\nread_file = filename.read()\n\ny=json.loads(read_file)\n"""\npd.set_option(\'display.width\', 200)\npd.set_option(\'display.max_colwidth\', -1)\nplayers = []\nplayers_info = []\nlive_games = []\nplayer_stats = {\'gp\':None,\'w\':None,\'l\':None,\'win_pct\':None,\'min\':None,\'fgm\':None,\'fga\':None,\'fg_pct\':None,\n                \'fg3m\':None,\'fg3a\':None,\'fg3_pct\':None,\'ftm\':None,\'fta\':None,\'ft_pct\':None,\'oreb\':None,\'dreb\':None,\n                \'reb\':None,\'ast\':None,\'tov\':None,\'stl\':None,\'blk\':None,\'pf\':None,\'pts\':None,\'plus_minus\':None}\nplayer_common_info = {\'first_name\':None,\'last_name\':None,\'jersey\':None,\'position\':None,\'team\':None,\'experience\':None,\n                      \'school\':None,\'height\':None,\'weight\':None,\'birthdate\':None}\nplay_by_play_info = {\'quarter\':None,\'time\':None,\'home\':None,\'away\':None}\n#player_stats = {\'name\':None,\'avg_dribbles\':None,\'avg_touch_time\':None,\'avg_shot_distance\':None,\'avg_defender_distance\':None}\n\ndef index():\n    """\n    example action using the internationalization operator T and flash\n    rendered by views/default/index.html or views/generic.html\n\n    if you need a simple wiki simply replace the two lines below with:\n    return auth.wiki()\n    """\n    test = \'My Thumbnail\'\n    response.flash = T("Welcome to web2py!")\n    return dict(message=T(\'Hello World\'))\n\n\ndef get_live_scores():\n    url = \'http://stats.nba.com/stats/playbyplayv2?EndPeriod=10&EndRange=55800&\' + \\\n    \'GameID=0021400855&RangeType=2&Season=2014-15&SeasonType=Regular+Season&StartPeriod=1&StartRange=0\'\n    response = requests.get(url)\n    play_by_play = response.json()[\'resultSets\'][0][\'rowSet\']\n    data = simplejson.loads(response.text)\n    headers = data[\'resultSets\'][0][\'headers\']\n    game_data = data[\'resultSets\'][0][\'rowSet\'][0]\n    play_by_play_df = pd.DataFrame(game_data,columns=headers)\n    quarter = play_by_play_df[\'PERIOD\'].to_string()\n    time = play_by_play_df[\'PCTIMESTRING\'].to_string()\n    home = play_by_play_df[\'HOMEDESCRIPTION\'].to_string()\n    away = play_by_play_df[\'VISITORDESCRIPTION\'].to_string()\n    play_by_play_info[\'quarter\'] = quarter\n    play_by_play_info[\'time\'] = time\n    play_by_play_info[\'home\'] = home\n    play_by_play_info[\'away\'] = away\n    live_games.append(play_by_play_info.copy())\n\n\ndef scores():\n    get_live_scores()\n    live_games_cols = [\'quarter\',\'time\',\'home\',\'away\']\n    live_games_df = pd.DataFrame(live_games,columns = live_games_cols)\n    live_games_df = live_games_df.to_html(classes="table table-condensed")\n    return dict(live_games_df=live_games_df)\n\n\ndef team_players():\n    return(dict(a="a"))\n\ndef player_info(player_id):\n    url = \'http://stats.nba.com/stats/commonplayerinfo?LeagueID=00&\' + \\\n    \'PlayerID=\'+player_id+\'&SeasonType=Regular+Season\'\n    response = requests.get(url)\n    shots = response.json()[\'resultSets\'][0][\'rowSet\']\n    data = simplejson.loads(response.text)\n    headers = data[\'resultSets\'][0][\'headers\']\n    shot_data = data[\'resultSets\'][0][\'rowSet\']\n    player_info_df = pd.DataFrame(shot_data,columns=headers)\n    first_name = player_info_df[\'FIRST_NAME\'].to_string()\n    last_name = player_info_df[\'LAST_NAME\'].to_string()\n    jersey = player_info_df[\'JERSEY\'].mean(axis=1)\n    position = player_info_df[\'POSITION\'].to_string()\n    team = player_info_df[\'TEAM_NAME\'].to_string()\n    experience = player_info_df[\'SEASON_EXP\'].mean(axis=1)\n    school = player_info_df[\'SCHOOL\'].to_string()\n    height = player_info_df[\'HEIGHT\'].to_string()\n    weight= player_info_df[\'WEIGHT\'].mean(axis=1)\n    birthdate = player_info_df[\'BIRTHDATE\'].to_string()\n    player_common_info[\'first_name\'] = first_name\n    player_common_info[\'last_name\'] = last_name\n    player_common_info[\'jersey\'] = jersey\n    player_common_info[\'position\'] = position\n    player_common_info[\'team\'] = team\n    player_common_info[\'experience\'] = experience\n    player_common_info[\'school\'] = school\n    player_common_info[\'height\'] = height\n    player_common_info[\'weight\'] = weight\n    player_common_info[\'birthdate\'] = birthdate\n    players_info.append(player_common_info.copy())\n    print player_common_info\n\ndef find_current_stats(player_id):\n    """url = \'http://stats.nba.com/stats/playerdashptshotlog?\'+ \\\n    \'DateFrom=&DateTo=&GameSegment=&LastNGames=0&LeagueID=00&\' + \\\n    \'Location=&Month=0&OpponentTeamID=0&Outcome=&Period=0&\' + \\\n    \'PlayerID=\'+player_id+\'&Season=2014-15&SeasonSegment=&\' + \\\n    \'SeasonType=Regular+Season&TeamID=0&VsConference=&VsDivision=\'"""\n\n    url = \'http://stats.nba.com/stats/playerdashboardbygeneralsplits?\' + \\\n    \'DateFrom=&DateTo=&GameSegment=&LastNGames=0&LeagueID=00&Location=&\' + \\\n    \'MeasureType=Base&Month=0&OpponentTeamID=0&Outcome=&PaceAdjust=N&\' + \\\n    \'PerMode=PerGame&Period=0&PlayerID=\'+player_id+\'+&PlusMinus=N&Rank=N\' + \\\n    \'&Season=2014-15&SeasonSegment=&SeasonType=Regular+Season&VsConference=&VsDivision=\'\n    #Create Dict based on JSON response\n    response = requests.get(url)\n    #print response.elapsed\n    shots = response.json()[\'resultSets\'][0][\'rowSet\']\n    data = simplejson.loads(response.text)\n    #print (\'================================\')\n    #print data\n    #Create df from data and find averages\n    headers = data[\'resultSets\'][0][\'headers\']\n    shot_data = data[\'resultSets\'][0][\'rowSet\']\n    reg_stats_df = pd.DataFrame(shot_data,columns=headers)\n    #print (\'+++++++++++++++++++++++++++++++++\')\n    #print df\n    """avg_def = df[\'CLOSE_DEF_DIST\'].mean(axis=1)\n    avg_dribbles = df[\'DRIBBLES\'].mean(axis=1)\n    avg_shot_distance = df[\'SHOT_DIST\'].mean(axis=1)\n    avg_touch_time = df[\'TOUCH_TIME\'].mean(axis=1)"""\n    gp = reg_stats_df[\'GP\'].mean(axis=1)\n    w = reg_stats_df[\'W\'].mean(axis=1)\n    l = reg_stats_df[\'L\'].mean(axis=1)\n    win_pct = reg_stats_df[\'W_PCT\'].mean(axis=1)\n    min = reg_stats_df[\'MIN\'].mean(axis=1)\n    fgm = reg_stats_df[\'FGM\'].mean(axis=1)\n    fga = reg_stats_df[\'FGA\'].mean(axis=1)\n    fg_pct = reg_stats_df[\'FG_PCT\'].mean(axis=1)\n    fg3m = reg_stats_df[\'FG3M\'].mean(axis=1)\n    fg3a = reg_stats_df[\'FG3A\'].mean(axis=1)\n    fg3_pct = reg_stats_df[\'FG3_PCT\'].mean(axis=1)\n    ftm = reg_stats_df[\'FTM\'].mean(axis=1)\n    fta = reg_stats_df[\'FTA\'].mean(axis=1)\n    ft_pct = reg_stats_df[\'FT_PCT\'].mean(axis=1)\n    oreb = reg_stats_df[\'OREB\'].mean(axis=1)\n    dreb = reg_stats_df[\'DREB\'].mean(axis=1)\n    reb = reg_stats_df[\'REB\'].mean(axis=1)\n    ast = reg_stats_df[\'AST\'].mean(axis=1)\n    tov = reg_stats_df[\'TOV\'].mean(axis=1)\n    stl = reg_stats_df[\'STL\'].mean(axis=1)\n    blk = reg_stats_df[\'BLK\'].mean(axis=1)\n    pf = reg_stats_df[\'PF\'].mean(axis=1)\n    pts = reg_stats_df[\'PTS\'].mean(axis=1)\n    plus_minus = reg_stats_df[\'PLUS_MINUS\'].mean(axis=1)\n    #add averages to dictionary\n    #player_stats[\'name\'] = name\n    """player_stats[\'avg_defender_distance\']=avg_def\n    player_stats[\'avg_shot_distance\'] = avg_shot_distance\n    player_stats[\'avg_touch_time\'] = avg_touch_time\n    player_stats[\'avg_dribbles\'] = avg_dribbles\n    players.append(player_stats.copy())"""\n    player_stats[\'gp\'] = gp\n    player_stats[\'w\']= w\n    player_stats[\'l\'] = l\n    player_stats[\'win_pct\'] = win_pct\n    player_stats[\'min\'] = min\n    player_stats[\'fgm\'] = fgm\n    player_stats[\'fga\'] = fga\n    player_stats[\'fg_pct\'] = fg_pct\n    player_stats[\'fg3m\'] = fg3m\n    player_stats[\'fg3a\'] = fg3a\n    player_stats[\'fg3_pct\'] = fg3_pct\n    player_stats[\'ftm\'] = ftm\n    player_stats[\'fta\'] = fta\n    player_stats[\'ft_pct\'] = ft_pct\n    player_stats[\'ftm\'] = ftm\n    player_stats[\'fta\'] = fta\n    player_stats[\'ft_pct\'] = ft_pct\n    player_stats[\'oreb\'] = oreb\n    player_stats[\'dreb\'] = dreb\n    player_stats[\'reb\'] = reb\n    player_stats[\'ast\'] = ast\n    player_stats[\'tov\'] = tov\n    player_stats[\'stl\'] = stl\n    player_stats[\'blk\'] = blk\n    player_stats[\'pf\'] = pf\n    player_stats[\'pts\'] = pts\n    player_stats[\'+/-\'] = plus_minus\n    players.append(player_stats.copy())\n\ndef view():\n    p = db.player(request.args(0))\n    find_current_stats(p.player_id)\n    player_info(p.player_id)\n    player_info_cols = [\'first_name\',\'last_name\',\'jersey\',\'position\',\'team\',\'experience\',\n                      \'school\',\'height\',\'weight\',\'birthdate\']\n    reg_stats_cols = [\'gp\', \'w\', \'l\', \'win_pct\', \'min\', \'fgm\', \'fga\', \'fg_pct\', \'fg3m\', \'fg3a\', \'fg3_pct\',\n            \'ftm\', \'fta\',\'ft_pct\', \'pf\', \'oreb\', \'dreb\', \'reb\', \'ast\', \'tov\', \'stl\', \'blk\', \'pts\', \'+/-\']\n    player_info_df = pd.DataFrame(players_info, columns = player_info_cols)\n    player_info_df = player_info_df.to_html(classes="table table-condensed",index=False)\n    #print player_info_df\n    reg_stats_df = pd.DataFrame(players,columns = reg_stats_cols)\n    reg_stats_df = reg_stats_df.to_html(classes="table table-condensed", index=False)\n    return dict(player_info_df=player_info_df,reg_stats_df=reg_stats_df)\n\ndef stats():\n    with open (\'applications/ballislife/static/team_players.json\') as f:\n        data=f.read()\n        z=simplejson.dumps(data)\n    q = db.player\n    #NBA Stats API using selected player ID\n    """Will continue inserting into db.player\n    for x in teams:\n        for y,z in teams[x].items():\n            db.player.insert(**{\'name\':y, \'player_id\':z, \'team\':x})"""\n    #print db.executesql(\'DELETE (*) FROM player;\')\n    #print db.executesql(\'SELECT * FROM player;\')\n        #for y in teams[x]:\n            #db.player.insert(**{})\n            #print teams[x][y]\n    def generate_view_button(row):\n        view_page = A(\'View\', _class=\'btn\', _href=URL(\'default\', \'view\', args=[row.id]))\n        return view_page\n    links = [\n        dict(header=\'\', body = generate_view_button),\n        ]\n    form = SQLFORM.grid(q,\n        fields=[db.player.name, db.player.team],csv=False, orderby=db.player.name, details=False, links=links)\n    """find_stats(\'Stephen Curry\',\'201939\')\n    #find_stats(\'James Harden\',\'201935\')\n    #find_stats(\'Klay Thompson\',\'202691\')\n    #find_stats(\'LeBron James\',\'2544\')\n    #cols = [\'name\',\'avg_defender_distance\',\'avg_dribbles\',\'avg_shot_distance\',\'avg_touch_time\']\n    cols = [\'name\', \'gp\', \'w\', \'l\', \'win_pct\', \'min\', \'fgm\', \'fga\', \'fg_pct\', \'fg3m\', \'fg3a\', \'fg3_pct\',\n            \'ftm\', \'fta\',\'ft_pct\', \'pf\', \'oreb\', \'dreb\', \'reb\', \'ast\', \'tov\', \'stl\', \'blk\', \'pts\', \'+/-\']\n    df = pd.DataFrame(players,columns = cols)\n    print (\'=========================\')\n    print df\n    df = df.to_html(classes="table table-condensed")"""\n    return dict(form=form)\n\ndef top_players():\n    df = pd.read_json(\'http://stats.nba.com/stats/homepagev2?GameScope=Season&LeagueID=00&PlayerOrTeam=Player&PlayerScope=All+Players&Season=2014-15&SeasonType=Regular+Season&StatType=Traditional\')\n    df[[\'created_at\', \'title\', \'body\', \'comments\']]\n    print df\n    return dict(message=T(\'Hello World\'))\n\ndef user():\n    """\n    exposes:\n    http://..../[app]/default/user/login\n    http://..../[app]/default/user/logout\n    http://..../[app]/default/user/register\n    http://..../[app]/default/user/profile\n    http://..../[app]/default/user/retrieve_password\n    http://..../[app]/default/user/change_password\n    http://..../[app]/default/user/manage_users (requires membership in\n    use @auth.requires_login()\n        @auth.requires_membership(\'group name\')\n        @auth.requires_permission(\'read\',\'table name\',record_id)\n    to decorate functions that need access control\n    """\n    return dict(form=auth())\n\n\n@cache.action()\ndef download():\n    """\n    allows downloading of uploaded files\n    http://..../[app]/default/download/[filename]\n    """\n    return response.download(request, db)\n\n\ndef call():\n    """\n    exposes services. for example:\n    http://..../[app]/default/call/jsonrpc\n    decorate with @services.jsonrpc the functions to expose\n    supports xml, json, xmlrpc, jsonrpc, amfrpc, rss, csv\n    """\n    return service()\n\n\n@auth.requires_login() \ndef api():\n    """\n    this is example of API with access control\n    WEB2PY provides Hypermedia API (Collection+JSON) Experimental\n    """\n    from gluon.contrib.hypermedia import Collection\n    rules = {\n        \'<tablename>\': {\'GET\':{},\'POST\':{},\'PUT\':{},\'DELETE\':{}},\n        }\n    return Collection(db).process(request,response,rules)\n\nresponse._vars=response._caller(scores)\n'
p7
sS'snapshot'
p8
(dp9
sS'traceback'
p10
S'Traceback (most recent call last):\n  File "/Users/AlyanShafique/Documents/web2py/web2py/gluon/restricted.py", line 226, in restricted\n    exec ccode in environment\n  File "/Users/AlyanShafique/Documents/web2py/web2py/applications/ballislife/controllers/default.py", line 310, in <module>\n  File "/Users/AlyanShafique/Documents/web2py/web2py/gluon/globals.py", line 393, in <lambda>\n    self._caller = lambda f: f()\n  File "/Users/AlyanShafique/Documents/web2py/web2py/applications/ballislife/controllers/default.py", line 73, in scores\n    get_live_scores()\n  File "/Users/AlyanShafique/Documents/web2py/web2py/applications/ballislife/controllers/default.py", line 60, in get_live_scores\n    play_by_play_df = pd.DataFrame(game_data,columns=headers)\n  File "/Applications/anaconda/lib/python2.7/site-packages/pandas/core/frame.py", line 252, in __init__\n    copy=copy)\n  File "/Applications/anaconda/lib/python2.7/site-packages/pandas/core/frame.py", line 367, in _init_ndarray\n    return create_block_manager_from_blocks([values.T], [columns, index])\n  File "/Applications/anaconda/lib/python2.7/site-packages/pandas/core/internals.py", line 3230, in create_block_manager_from_blocks\n    construction_error(tot_items, blocks[0].shape[1:], axes, e)\n  File "/Applications/anaconda/lib/python2.7/site-packages/pandas/core/internals.py", line 3211, in construction_error\n    passed,implied))\nValueError: Shape of passed values is (1, 33), indices imply (33, 33)\n'
p11
s.